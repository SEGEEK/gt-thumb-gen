{"version":3,"sources":["ImageUtil.ts","ThumbnailGenerator.ts","index.ts"],"names":[],"mappings":"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","file":"gt-thumb-gen.2a16bab6.js","sourceRoot":"..","sourcesContent":["export async function convertURIToImageData(URI: string) {\r\n    return new Promise<HTMLImageElement>(function (resolve, reject) {\r\n        var image = new Image();\r\n        image.addEventListener('load', function () {\r\n            resolve(image);\r\n        });\r\n        \r\n        image.addEventListener('error', function(ev:ErrorEvent){\r\n            reject(ev.error);\r\n        });\r\n\r\n        image.setAttribute('src', URI);\r\n    });\r\n}","import imgPath from './images/gamingTrendLogo.png';\r\nimport {convertURIToImageData} from './ImageUtil';\r\n\r\nlet gamingTrendLogo = convertURIToImageData(imgPath);\r\n\r\nexport class ThumbnailGenerator{\r\n    private canvas: HTMLCanvasElement;\r\n\r\n    constructor(canvas: HTMLCanvasElement){\r\n        this.canvas = canvas;\r\n    }\r\n\r\n    public draw(input: ThumbnailGenInput) {\r\n        console.log('draw called', input);\r\n    \r\n        let ctx = this.canvas.getContext('2d');\r\n        ctx.clearRect(0, 0, this.canvas.width, this.canvas.height);\r\n    \r\n        ctx.drawImage(input.backgroundImage, 0, 0, this.canvas.width, this.canvas.height);\r\n    \r\n        this.drawOverlay(ctx);\r\n    \r\n        if (input.description) {\r\n            this.drawDescription(ctx, input.description);\r\n        }\r\n        if (input.subText) {\r\n            this.drawSubText(ctx, input.subText);\r\n        }\r\n        gamingTrendLogo.then(gtImage => this.canvas.getContext(\"2d\").drawImage(gtImage, 20, 590));\r\n    }\r\n\r\n    private drawOverlay(ctx: CanvasRenderingContext2D) {\r\n        var gradient = ctx.createLinearGradient(0, 530, 0, 720);\r\n        gradient.addColorStop(0, \"rgba(0,0,0,0)\");\r\n        gradient.addColorStop(1, \"rgba(0,0,0,255)\");\r\n        ctx.fillStyle = gradient;\r\n        // ctx.fillRect(0,0,200,100);\r\n        ctx.fillRect(0, 530, 1280, 190);\r\n        // var top = 720-190;\r\n        // var gradient = ctx.createLinearGradient(0,0,0,100);\r\n        // // gradient.addColorStop(0,\"rgba(255,255,255,0)\");\r\n        // gradient.addColorStop(0, 'white');\r\n        // gradient.addColorStop(1,\"rgba(0,0,0,255)\");\r\n        // ctx.fillStyle = gradient;\r\n        // ctx.fillRect(0,530, 1280,190);\r\n    }\r\n\r\n    private drawDescription(ctx, description) {\r\n        ctx.shadowColor = 'black';\r\n        ctx.shadowBlur = 0;\r\n        ctx.shadowOffsetX = 0;\r\n        ctx.shadowOffsetY = 0;\r\n        let oldLetterSpacing = this.canvas.style.letterSpacing;\r\n        this.canvas.style.letterSpacing = \"0.7px\";\r\n    \r\n        ctx.fillStyle = '#37c5ff';\r\n        ctx.font = \"bold 50pt 'Exo 2', sans-serif\";\r\n        ctx.fillText(description, 150, 642);\r\n    \r\n        this.canvas.style.letterSpacing = oldLetterSpacing;\r\n    }\r\n\r\n    private drawSubText(ctx, desc) {\r\n        let oldLetterSpacing = this.canvas.style.letterSpacing;\r\n        this.canvas.style.letterSpacing = \"1.35px\";\r\n    \r\n        ctx.fillStyle = '#d4d4d4';\r\n        ctx.font = \"bold 26pt 'Exo 2', sans-serif\";\r\n        // ctx.fillText(desc, 154, 686);\r\n        ctx.fillText(desc, 154, 680);\r\n    \r\n        this.canvas.style.letterSpacing = oldLetterSpacing;\r\n    }\r\n}\r\n\r\ninterface ThumbnailGenInput {\r\n    backgroundImage?: HTMLCanvasElement | HTMLVideoElement | HTMLImageElement | ImageBitmap;\r\n    description?: string;\r\n    subText?: string;\r\n}","import { convertURIToImageData } from './ImageUtil';\r\nimport { ThumbnailGenerator } from './ThumbnailGenerator';\r\n\r\n\r\nlet canvas = document.getElementById('canvas') as HTMLCanvasElement;\r\nlet thumbnailGenerator = new ThumbnailGenerator(canvas);\r\nlet body = document.body;\r\nlet backgroundImage = document.getElementById('background-image') as HTMLCanvasElement;\r\nlet backgroundImagePromise: Promise<HTMLImageElement> = Promise.reject('No background image specified');\r\n\r\ndocument.getElementById('redraw').onclick = () => {\r\n    var desc = (document.getElementById('description') as HTMLInputElement).value;\r\n    var sub = (document.getElementById('subtext') as HTMLInputElement).value;\r\n\r\n    if(!desc){\r\n        alert('Description must be specified.');\r\n        return;\r\n    }\r\n\r\n    if(!sub){\r\n        alert('Subtext must be specified.');\r\n        return;\r\n    }\r\n\r\n    backgroundImagePromise\r\n        .then(backgroundImage => thumbnailGenerator.draw({ description: desc, subText: sub, backgroundImage }))\r\n        .catch(alert);\r\n};\r\n\r\ndocument.body.addEventListener('drop', function (e) {\r\n    e.stopPropagation();\r\n    e.preventDefault();\r\n    var file = e.dataTransfer.files[0];\r\n\r\n    document.getElementById('dropPreview')\r\n        .innerHTML = `Background Image: ${file.name} - type:${file.type} - size ${file.size}B`;\r\n    console.info('dropped file detected', file);\r\n\r\n    backgroundImagePromise = readImageFile(file);\r\n});\r\n\r\nfunction setBackgroundImageSrc(image) {\r\n    console.info('setting background image', image);\r\n    backgroundImage.setAttribute('src', image);\r\n    return image;\r\n}\r\n\r\nfunction readImageFile(file: File): Promise<HTMLImageElement> {\r\n    return new Promise<HTMLImageElement>(function (resolve, reject) {\r\n        var reader = new FileReader();\r\n        reader.onload = function () {\r\n            if (typeof reader.result === 'string') {\r\n                setBackgroundImageSrc(reader.result);\r\n                resolve(convertURIToImageData(reader.result));\r\n            }\r\n            else {\r\n                console.error('reader result is not a string', reader.result);\r\n                reject('Unable to read the specified image file');\r\n            }\r\n        };\r\n        reader.readAsDataURL(file);\r\n    });\r\n}\r\n\r\nbody.addEventListener('paste', (ev: ClipboardEvent) => {\r\n    let clipboardData = ev.clipboardData;\r\n    if (clipboardData.items.length) {\r\n        let firstItem = clipboardData.items[0];\r\n        if (firstItem.kind === 'file' && firstItem.type.startsWith('image')) {\r\n            var file = clipboardData.items[0].getAsFile();\r\n            backgroundImagePromise = readImageFile(file);\r\n        } else if (firstItem.kind === 'string') {\r\n            clipboardData.items[0].getAsString((str) => {\r\n                console.log('clipboard paste as string', str);\r\n            });\r\n        } else {\r\n            console.error(`unrecognized item type of ${firstItem.kind}`);\r\n        }\r\n    } else {\r\n        console.error('Nothing found on clipboard, if you are trying to paste a file, drag/drop instead');\r\n    }\r\n});"]}