{"version":3,"sources":["ImageUtil.ts","youtube-video.ts","ThumbnailGenerator.ts","index.ts"],"names":[],"mappings":"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","file":"gt-thumb-gen.46f918c5.map","sourceRoot":"..","sourcesContent":["export async function convertURIToImageData(URI: string) {\r\n    return new Promise<HTMLImageElement>(function (resolve, reject) {\r\n        if (URI == null) {\r\n            return reject();\r\n        }\r\n        var image = new Image();\r\n        image.addEventListener('load', function () {\r\n            resolve(image);\r\n        }, false);\r\n        //TODO reject on 'error' event?\r\n        image.setAttribute('src', URI);\r\n    });\r\n}","// Test code for url parser ...\r\n// var urls = ['https://youtu.be/X_Ch70KkMtE?t=2m57s', 'https://youtu.be/X_Ch70KkMtE', 'https://www.youtube.com/watch?v=X_Ch70KkMtE', 'https://www.youtube.com/watch?v=X_Ch70KkMtE&t=2m57s'];\r\n// urls.forEach(u => console.log(u, YoutubeVideo.parseYoutubeUrl(u)));\r\n\r\nexport class YoutubeVideo{\r\n    public static getVideoInfo(id){\r\n        return fetch(\"https://www.youtube.com/get_video_info?video_id=\"+id, {\"credentials\":\"omit\",\"headers\":{},\"referrer\":\"http://localhost:8000/test.html\",\"referrerPolicy\":\"no-referrer-when-downgrade\",\"body\":null,\"method\":\"GET\",\"mode\":\"cors\"})\r\n        .then(response => {\r\n            if(!response.ok ){\r\n                throw new Error(\"Unable to complete request\");\r\n            }\r\n            return response.text();\r\n        }).then(video_info =>{\r\n            var video;\r\n            video = this.decodeQueryString(video_info);\r\n            if (video.status === \"fail\") {\r\n             return video;\r\n            }\r\n            video.sources = this.decodeStreamMap(video.url_encoded_fmt_stream_map);\r\n            video.getSource = function(type, quality) {\r\n            var exact, key, lowest, source, _ref;\r\n            lowest = null;\r\n            exact = null;\r\n            _ref = this.sources;\r\n            for (key in _ref) {\r\n                source = _ref[key];\r\n                if (source.type.match(type)) {\r\n                if (source.quality.match(quality)) {\r\n                    exact = source;\r\n                } else {\r\n                    lowest = source;\r\n                }\r\n                }\r\n            }\r\n            return exact || lowest;\r\n            };\r\n            return video;\r\n        });\r\n\r\n    }\r\n\r\n    private static decodeQueryString(queryString:string) {\r\n      var key, keyValPair, keyValPairs, r, val, _i, _len;\r\n      r = {};\r\n      keyValPairs = queryString.split(\"&\");\r\n      for (_i = 0, _len = keyValPairs.length; _i < _len; _i++) {\r\n        keyValPair = keyValPairs[_i];\r\n        key = decodeURIComponent(keyValPair.split(\"=\")[0]);\r\n        val = decodeURIComponent(keyValPair.split(\"=\")[1] || \"\");\r\n        r[key] = val;\r\n      }\r\n      return r;\r\n    }\r\n\r\n    private static decodeStreamMap(url_encoded_fmt_stream_map) {\r\n      var quality, sources, stream, type, urlEncodedStream, _i, _len, _ref;\r\n      sources = {};\r\n      _ref = url_encoded_fmt_stream_map.split(\",\");\r\n      for (_i = 0, _len = _ref.length; _i < _len; _i++) {\r\n        urlEncodedStream = _ref[_i];\r\n        stream = this.decodeQueryString(urlEncodedStream);\r\n        type = stream.type.split(\";\")[0];\r\n        quality = stream.quality.split(\",\")[0];\r\n        stream.original_url = stream.url;\r\n        stream.url = \"\" + stream.url + \"&signature=\" + stream.sig;\r\n        sources[\"\" + type + \" \" + quality] = stream;\r\n      }\r\n      return sources;\r\n    }\r\n\r\n    public static parseYoutubeUrl(url:string){\r\n        let res = /https:\\/\\/youtu\\.be\\/([^\\?]*)(\\?t=)?(.*)?/.exec(url);\r\n        let id=undefined;\r\n        let timeString = undefined;\r\n        if(res){\r\n            id = res[1];\r\n            timeString = res[3];\r\n        } else {\r\n            res = /https:\\/\\/www\\.youtube\\.com\\/watch\\?v=([^&]*)(&t=)?(.*)/.exec(url);\r\n            if(res){\r\n                id=res[1];\r\n                timeString = res[3];\r\n            } else {\r\n                throw new Error('Invalid Youtube url specified');\r\n            }\r\n        }\r\n        return {id, seconds: this.timestringToSeconds(timeString)};\r\n    }\r\n\r\n    private static timestringToSeconds(timeString){\r\n        if(!timeString){\r\n         return 0;\r\n        }\r\n\r\n        var hours = timeString.match(/(\\d)+h/); \r\n        var minutes = timeString.match(/(\\d)+m/);\r\n        var seconds = timeString.match(/(\\d)+s/);\r\n    \r\n        var totalTimeInSeconds = 0;\r\n        \r\n        if (hours) {\r\n        hours = hours[0].replace(\"h\",\"\");\r\n        totalTimeInSeconds += hours * 60 * 60;\r\n        }\r\n        \r\n        if (minutes) {\r\n            minutes = minutes[0].replace(\"m\",\"\");\r\n            totalTimeInSeconds += minutes * 60;\r\n        }\r\n        \r\n        if (seconds) {\r\n        seconds = seconds[0].replace(\"s\",\"\")\r\n        totalTimeInSeconds += seconds * 1;\r\n        }\r\n        return totalTimeInSeconds;\r\n    }\r\n  }","import imgPath from './images/gamingTrendLogo.png';\r\nimport {convertURIToImageData} from './ImageUtil';\r\n\r\nlet gamingTrendLogo = convertURIToImageData(imgPath);\r\n\r\nexport class ThumbnailGenerator{\r\n    private canvas: HTMLCanvasElement;\r\n\r\n    constructor(canvas: HTMLCanvasElement){\r\n        this.canvas = canvas;\r\n    }\r\n\r\n    public draw(input: ThumbnailGenInput) {\r\n        console.log('draw called', input);\r\n    \r\n        let ctx = this.canvas.getContext('2d');\r\n        ctx.clearRect(0, 0, this.canvas.width, this.canvas.height);\r\n    \r\n        ctx.drawImage(input.backgroundImage, 0, 0, this.canvas.width, this.canvas.height);\r\n    \r\n        this.drawOverlay(ctx);\r\n    \r\n        if (input.description) {\r\n            this.drawDescription(ctx, input.description);\r\n        }\r\n        if (input.subText) {\r\n            this.drawSubText(ctx, input.subText);\r\n        }\r\n        gamingTrendLogo.then(gtImage => this.canvas.getContext(\"2d\").drawImage(gtImage, 20, 590));\r\n    }\r\n\r\n    private drawOverlay(ctx: CanvasRenderingContext2D) {\r\n        var gradient = ctx.createLinearGradient(0, 530, 0, 720);\r\n        gradient.addColorStop(0, \"rgba(0,0,0,0)\");\r\n        gradient.addColorStop(1, \"rgba(0,0,0,255)\");\r\n        ctx.fillStyle = gradient;\r\n        // ctx.fillRect(0,0,200,100);\r\n        ctx.fillRect(0, 530, 1280, 190);\r\n        // var top = 720-190;\r\n        // var gradient = ctx.createLinearGradient(0,0,0,100);\r\n        // // gradient.addColorStop(0,\"rgba(255,255,255,0)\");\r\n        // gradient.addColorStop(0, 'white');\r\n        // gradient.addColorStop(1,\"rgba(0,0,0,255)\");\r\n        // ctx.fillStyle = gradient;\r\n        // ctx.fillRect(0,530, 1280,190);\r\n    }\r\n\r\n    private drawDescription(ctx, description) {\r\n        ctx.shadowColor = 'black';\r\n        ctx.shadowBlur = 0;\r\n        ctx.shadowOffsetX = 0;\r\n        ctx.shadowOffsetY = 0;\r\n        let oldLetterSpacing = this.canvas.style.letterSpacing;\r\n        this.canvas.style.letterSpacing = \"0.7px\";\r\n    \r\n        ctx.fillStyle = '#37c5ff';\r\n        ctx.font = \"bold 50pt 'Exo 2', sans-serif\";\r\n        ctx.fillText(description, 150, 642);\r\n    \r\n        this.canvas.style.letterSpacing = oldLetterSpacing;\r\n    }\r\n\r\n    private drawSubText(ctx, desc) {\r\n        let oldLetterSpacing = this.canvas.style.letterSpacing;\r\n        this.canvas.style.letterSpacing = \"1.35px\";\r\n    \r\n        ctx.fillStyle = '#d4d4d4';\r\n        ctx.font = \"bold 26pt 'Exo 2', sans-serif\";\r\n        // ctx.fillText(desc, 154, 686);\r\n        ctx.fillText(desc, 154, 680);\r\n    \r\n        this.canvas.style.letterSpacing = oldLetterSpacing;\r\n    }\r\n}\r\n\r\ninterface ThumbnailGenInput {\r\n    backgroundImage?: HTMLCanvasElement | HTMLVideoElement | HTMLImageElement | ImageBitmap;\r\n    description?: string;\r\n    subText?: string;\r\n}","import {convertURIToImageData} from './ImageUtil';\r\nimport { YoutubeVideo } from './youtube-video';\r\nimport {ThumbnailGenerator} from './ThumbnailGenerator';\r\n\r\n\r\nlet canvas = document.getElementById('canvas') as HTMLCanvasElement;\r\nlet thumbnailGenerator = new ThumbnailGenerator(canvas);\r\nlet body = document.body;\r\nlet backgroundImage = document.getElementById('background-image') as HTMLCanvasElement;\r\n\r\nfunction setBackgroundImageSrc(image){\r\n    console.info('setting background image', image);\r\n    backgroundImage.setAttribute('src', image);\r\n    return image;\r\n}\r\n\r\ninterface Rect {\r\n    x: number;\r\n    y: number;\r\n    width: number;\r\n    height: number;\r\n}\r\n\r\nfunction getAdjustmentForImageAndCanvas(imageRect: Rect, canvasRect: Rect): { source: Rect, destination: Rect } {\r\n    if (imageRect.width === canvasRect.width && imageRect.height === canvasRect.height) {\r\n        return {\r\n            source: { ...imageRect },\r\n            destination: { ...imageRect }\r\n        };\r\n    }\r\n    //example time ... 10x5 going into 10x10\r\n    // scale image by 2 to 20x10 into 10x10\r\n    //\r\n    return {\r\n        source: { x: 0, y: 0, width: 0, height: 0 },\r\n        destination: { x: 0, y: 0, width: 0, height: 0 }\r\n    };\r\n}\r\n\r\n// let backgroundImagePromise: Promise<HTMLImageElement>  = new Promise((resolve,reject) => reject('No Background Image specified'));\r\nlet backgroundImagePromise: Promise<HTMLImageElement> | undefined = undefined;\r\n\r\nlet description = 'Holly Saves Time' //'Naval Combat and Recruiting';\r\nlet subText = \"Wow this is awesome, I can't believe it\"//\"Assasin's Creed Odyssey - PC - 4K Max Settings\";\r\n\r\ndocument.body.addEventListener('drop', function (e) {\r\n    e.stopPropagation();\r\n    e.preventDefault();\r\n    var file = e.dataTransfer.files[0];\r\n    \r\n\r\n    document.getElementById('dropPreview')\r\n        .innerHTML = `Background Image: ${file.name} - type:${file.type} - size ${file.size}B`;\r\n    console.info('dropped file detected', file);\r\n\r\n    readImageFile(file);\r\n})\r\n\r\nfunction readImageFile(file: File) {\r\n    var reader = new FileReader();\r\n    reader.onload = function (e) {\r\n        if (typeof reader.result === 'string') {\r\n            setBackgroundImageSrc(reader.result);\r\n            backgroundImagePromise = convertURIToImageData(reader.result);\r\n        }\r\n        else {\r\n            //TODO reject \r\n            console.error('reader result is not a string', reader.result);\r\n        }\r\n    };\r\n    reader.readAsDataURL(file);\r\n}\r\n\r\nasync function getVideoUrl(videoId) {\r\n    return YoutubeVideo.getVideoInfo(videoId)\r\n        .then((video) => {\r\n            console.log('video', video);\r\n            console.log('hd stream', video.getSource('mp4', 'hd720'));\r\n            let videoSource = video.getSource('mp4', 'hd720');\r\n            let videoUrl = videoSource.url;\r\n            if (!videoUrl) {\r\n                throw new Error('Unable to attain video url');\r\n            }\r\n            return videoUrl;\r\n        })\r\n        .catch(error => console.log('Error', error));\r\n}\r\n\r\nasync function getVideoFrame(videoId, seektime?: number) {\r\n    let url = await getVideoUrl(videoId);\r\n    let extractor = new VideoFrameExtractor(url);\r\n    if (seektime) {\r\n        await extractor.seek(seektime);\r\n    }\r\n    return extractor.getFrame();\r\n}\r\n\r\nclass VideoFrameExtractor {\r\n    private backgroundVideo: HTMLVideoElement;\r\n    private loadedPromise: Promise<void>;\r\n    private loadedResolve;\r\n    private loadedReject;\r\n\r\n    private seekedPromise: Promise<void> = this.seekedPromise = new Promise(resolve => resolve());;\r\n    private seekedResolve = () => { };\r\n    private seekedReject = (reason?: any) => { };\r\n\r\n    constructor(public url: string) {\r\n        this.loadedPromise = new Promise((resolve, reject) => {\r\n            this.loadedResolve = resolve;\r\n            this.loadedReject = reject;\r\n        });\r\n\r\n        this.backgroundVideo = document.createElement('video');\r\n        this.backgroundVideo.crossOrigin = 'anonymous';\r\n        this.backgroundVideo.addEventListener('loadeddata', (ev) => this.loadedResolve(), false);\r\n        this.backgroundVideo.addEventListener('seeked', (ev) => this.seekedResolve(), false);\r\n        this.backgroundVideo.addEventListener('error', (ev) => {\r\n            this.loadedReject(ev.error);\r\n            this.seekedReject(ev.error);\r\n        }, false);\r\n\r\n        this.backgroundVideo.preload = 'auto';\r\n        this.backgroundVideo.src = url;\r\n    }\r\n\r\n    public async seek(seconds) {\r\n        await this.loadedPromise;\r\n        this.seekedPromise = new Promise((resolve, reject) => {\r\n            this.seekedResolve = resolve;\r\n            this.seekedReject = reject;\r\n        });\r\n        this.backgroundVideo.currentTime = seconds;\r\n        return this.seekedPromise;\r\n    }\r\n\r\n    public async getFrame() {\r\n        await this.loadedPromise;\r\n\r\n        let c = document.createElement('canvas');\r\n        var ctx = c.getContext('2d');\r\n        c.width = this.backgroundVideo.videoWidth;\r\n        c.height = this.backgroundVideo.videoHeight;\r\n        console.log('getting frame', c);\r\n        ctx.drawImage(this.backgroundVideo, 0, 0, c.width, c.height);\r\n        return c.toDataURL();\r\n    }\r\n}\r\n\r\n// var backgroundImage = new Image;\r\n// backgroundImage.addEventListener(\"load\", function () {\r\n//     draw({backgroundImage, description, subText});\r\n// });\r\n// backgroundImage.setAttribute('src', backgroundImagePath);\r\n\r\ndocument.getElementById('redraw').onclick = () => {\r\n    var desc = (document.getElementById('description') as HTMLInputElement).value || description;\r\n    var sub = (document.getElementById('subtext') as HTMLInputElement).value || subText;\r\n    var youtubeUrl = (document.getElementById('youtubeurl') as HTMLInputElement).value || undefined;\r\n    if (youtubeUrl) {\r\n        let youtubeInfo = YoutubeVideo.parseYoutubeUrl(youtubeUrl);\r\n        getVideoFrame(youtubeInfo.id, youtubeInfo.seconds)\r\n            .then(setBackgroundImageSrc)\r\n            .then(convertURIToImageData)            \r\n            .then(backgroundImage => thumbnailGenerator.draw({ description: desc, subText: sub, backgroundImage }));\r\n    } else {\r\n        backgroundImagePromise.then(backgroundImage => thumbnailGenerator.draw({ description: desc, subText: sub, backgroundImage }));\r\n    }\r\n};\r\n\r\nbody.addEventListener('paste', (ev: ClipboardEvent) => {\r\n    let clipboardData = ev.clipboardData;\r\n    if (clipboardData.items.length) {\r\n        let firstItem = clipboardData.items[0];\r\n        if (firstItem.kind === 'file' && firstItem.type.startsWith('image')) {\r\n            var file = clipboardData.items[0].getAsFile();\r\n            readImageFile(file);\r\n        } else if (firstItem.kind === 'string') {\r\n            clipboardData.items[0].getAsString((str) => {\r\n                console.log('clipboard paste as string', str);\r\n            });\r\n        } else {\r\n            console.error(`unrecognized item type of ${firstItem.kind}`);\r\n        }\r\n    } else {\r\n        console.error('Nothing found on clipboard, if you are trying to paste a file, drag/drop instead');\r\n    }\r\n});"]}